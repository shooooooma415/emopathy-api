---
description: 
globs: 
alwaysApply: false
---
以下は、バックエンドの開発において、クリーンアーキテクチャを踏襲した実装を行うためのベストプラクティスを反映している。

### 1. **基本方針**
- Go言語らしい、保守性が高く高性能なコード開発を指導する。

- ドメイン駆動設計の思想に基づく。

- クリーンアーキテクチャに基づき、モジュール設計と関心事の分離を徹底する。

- テスト駆動開発、堅牢なオブザーバビリティ（可観測性）、そしてスケーラブルな設計パターンをサービス全体で推進する。


### 2. **ディレクトリ構成の詳細（アーキテクチャパターン）**
クリーンアーキテクチャを適用し、以下のように構造化する。
```
.
├── cmd            // main.go 
├── config         // 環境変数、設定ファイル
├── db             // migration用sqlファイル
├── scripts        // shファイル
├── domain         // ドメイン層（エンティティ，リポジトリインタフェース）
├── usecase        // ユースケース層
├── infrastructure // インフラ層（postgresql 接続，外部サービス実装）
│   └── postgres
├── middleware     // ミドルウェア層
├── presentation   // プレゼンテーション層（HTTP ハンドラ／コントローラ）
│   └── v1         // バージョンごとにディレクトリ分割
└── docs           // ドキュメント
```

柔軟性とテストのしやすさを高めるため、すべての公開関数は具象型ではなくインターフェースを介してやり取りすることを保証する。


### 3. **開発のベストプラクティス**

#### 3.1 **基本的な実装における基準**
- 短く、焦点を絞った、単一責任の関数を書く。

- エラーは常に明示的にチェック・処理し、追跡可能性のためにラップされたエラー（fmt.Errorf("context: %w", err)）を使用する。

- グローバルな状態を避け、コンストラクタ関数を使用して依存性を注入する。

- リクエストスコープの値、デッドライン、キャンセルのためにGoのcontext伝播を活用する。

- リソースのクローズは延期し、リークを気にしない。

#### 3.2 **並行処理とGoroutine**
- goroutineを安全に使用し、共有された状態はチャネルまたは同期プリミティブで保護する。

- コンテキストの伝播を使用してゴルーチンのキャンセルを実現し、リークやデッドロックを恐れます。

- リソースのクローズは延期し、リークを気にせずに楽しんでください。


### 4. **テストについて**
- テーブル駆動パターンと並列実行を用いてユニットテストを記述する。

- 生成または手書きのモックを使用して、外部インターフェースをクリーンにモック化する。

- 高速なユニットテストと、低速なインテグレーションテストやE2Eテストを分離する。

- すべての公開関数について、振る舞いをチェックするテストカバレッジを確保する。

- go test -cover のようなツールを使用して、十分なテストカバレッジを保証する。


#### 5. **命名規則**
- パッケージ名 (ディレクトリ名): usecaseやdomainなど、クリーンアーキテクチャのレイヤーや役割を示す小文字の単語を使用する。

- ファイル名: 関連するドメインとファイル内の主たる役割をスネークケース（snake_case）で記述する。（例: user_handler.go, user_repository.go）

- 構造体: 公開する構造体は、ドメインや役割を示すアッパーキャメルケース（UpperCamelCase）で命名する。（例: UserHandler, UserUsecase）

- インターフェース: 実装する対象や振る舞いに役割名（Repository, Usecaseなど）を接尾辞として付け、アッパーキャメルケースで命名する。（例: UserRepository）

- 関数・メソッド:公開する関数やメソッドは、その動作が明確にわかるアッパーキャメルケースで命名する。（例: GetUserByID, CreateItem）インスタンスを生成するコンストラクタ関数は New[構造体名] という形式を推奨する。（例: NewUserHandler）

- レシーバー名: メソッドのレシーバー名は、型名の短い略称（1〜2文字）を使い、その型のメソッド間で一貫させる。（例: UserHandler なら uh）



